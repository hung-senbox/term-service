name: Deploy Golang App to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch: 
    inputs:
      service_name:
        description: 'Service name to deploy (leave empty for all)'
        required: false
        default: 'term-service'  # T√™n service m·∫∑c ƒë·ªãnh

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        script: |
          echo "üöÄ Starting deployment..."
          cd /home/ubuntu/app/term-service

          git pull origin main
          # Di chuy·ªÉn t·ªõi th∆∞ m·ª•c project
          cd /home/ubuntu/app/senbox-volumes
          
          # Pull code m·ªõi t·ª´ GitHub
          echo "üì• Pulling latest code..."
          git pull origin main
          
          # X√°c ƒë·ªãnh service c·∫ßn deploy
          SERVICE_NAME="${{ github.event.inputs.service_name || 'term-service' }}"
          echo "üéØ Deploying service: $SERVICE_NAME"
          
          # D·ª´ng service c·ª• th·ªÉ
          echo "üõë Stopping service: $SERVICE_NAME"
          docker compose stop $SERVICE_NAME || true
          docker compose rm -f $SERVICE_NAME || true
          
          # X√≥a image c≈© c·ªßa service n√†y
          echo "üßπ Cleaning up old image for $SERVICE_NAME..."
          docker image rm senbox-volumes-${SERVICE_NAME} || true
          docker image prune -f || true
          
          # Build v√† start l·∫°i service c·ª• th·ªÉ
          echo "üèóÔ∏è Building and starting service: $SERVICE_NAME"
          docker compose up -d --build $SERVICE_NAME
          
          # Ch·ªù service kh·ªüi ƒë·ªông
          echo "‚è≥ Waiting for service to start..."
          sleep 15
          
          # Ki·ªÉm tra status c·ªßa service c·ª• th·ªÉ
          echo "‚úÖ Checking service status..."
          docker compose ps $SERVICE_NAME
          
          # Ki·ªÉm tra logs n·∫øu service fail
          if ! docker compose ps $SERVICE_NAME | grep -q "Up"; then
            echo "‚ùå Service failed to start, checking logs:"
            docker compose logs --tail=20 $SERVICE_NAME
            exit 1
          fi
          
          echo "üéâ Service $SERVICE_NAME deployed successfully!"
          
    - name: Notify success
      if: success()
      run: echo "‚úÖ Deployment to EC2 successful!"
      
    - name: Notify failure
      if: failure()
      run: echo "‚ùå Deployment to EC2 failed!"